{
	// Place your snippets for typescript here. Each snippet is defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"定义log": {
		"prefix": "log",
		"body": "console.log($1)$2"
	},
	"导入(模块, 插件, 方法等)": {
		"prefix": "import",
		"body": "import $1 from $2"
	},
	"定义const": {
		"prefix": "const",
		"body": [
			"const $1 = $2"
		]
	},
	"定义let": {
		"prefix": "let",
		"body": [
			"let $1 = $2"
		]
	},
	"定义解构的const": {
		"prefix": "const_d",
		"body": [
			"const { $2 } = $1"
		]
	},
	"定义解构的let": {
		"prefix": "let_d",
		"body": [
			"let { $2 } = $1"
		]
	},
	"创建model模版": {
		"prefix": "model",
		"body": [
			"import { Effect, Reducer } from 'umi'",
			"import api from '@/services'",
			"",
			"export interface I$1State {}",
			"",
			"export interface I$1Model {",
			"  state: I$1State",
			"  effects: {",
			"    $2",
			"  }",
			"  reducers: {",
			"    updateState: Reducer<I$1State>",
			"  }",
			"}",
			"",
			"const {} = api",
			"",
			"const $1: I$1Model = {",
			"  state: {},",
			"  effects: {},",
			"  reducers: {",
			"    updateState(state, { payload }) {",
			"      return {",
			"        ...state,",
			"        ...payload",
			"      }",
			"    }",
			"  }",
			"}",
			"",
			"export default $1"
		]
	},
	"创建yield方法": {
		"prefix": "*",
		"body": [
			"*$1({ payload, callback }, { call, put }) {",
			"  const response = yield call($2, payload)",
			"  $3",
			"}"
		]
	},
	"创建 if": {
		"prefix": "if",
		"body": [
			"if ($1) {",
			"  $2",
			"}"
		]
	},
	"创建 put": {
		"prefix": "*put",
		"body": [
			"yield put({",
			"  type: 'updateState',",
			"   payload: {$1}",
			"})"
		]
	},
	"创建callback": {
		"prefix": "callback",
		"body": [
			"callback && callback()"
		]
	},
	"定义interface": {
		"prefix": "interface",
		"body": [
			"export interface I$1 {$2}"
		]
	},
	"定义tableData": {
		"prefix": "tableData",
		"body": [
			"tableData: {",
			"  list: $1[]",
			"  pagination: MS.pagination",
			"}"
		]
	},
	"tableDate数据初始化": {
		"prefix": "tableData_i",
		"body": [
			"tableData: {",
			"  list: [],",
			"  pagination: {",
			"    total: 0,",
			"    current: 1,",
			"    pageSize: 10",
			"  }",
			"}"
		]
	},
	"创建含routes的Route项": {
		"prefix": "route_f",
		"body": [
			"{",
			"  path: '/$1',",
			"  title: '$2',",
			"  active: '$1',",
			"  breadcrumb: '/$1',",
			"  wrappers: ['@/wrappers/auth'],",
			"  exclude: [],",
			"  routes: [",
			"    $3",
			"  ]",
		  "},"
		]
	},
	"创建不含routes的Route项": {
		"prefix": "route_s",
		"body": [
			"{",
			"  path: '/$1',",
			"  title: '$2',",
			"  active: '$3',",
			"  component: '$4',",
			"  breadcrumb: '/$1',",
			"  wrappers: ['@/wrappers/auth'],",
			"  exclude: [],",
			"  noShowInMenu: false",
		  "},"
		]
	},
	"在constant.ts 中创建常量": {
		"prefix": "const_list",
		"body": [
			"export const $1 = [",
			"  { label: $2, value: $3 }",
			"]",
			"",
			"export const MAP_$1 = genMapObject($1)",
			"export type T_MAP_$1 = keyof typeof MAP_$1"
		]
	},
	"code review 注释":{
		"prefix": "cr",
		"body": [
			"// TODO: CODE REVIEW YJH: $1"
		]
	},
	"response table解构": {
		"prefix": "response_t",
		"body": [
			"const { count = 0, result = [] } = response"
		]
	},
	"*put_table": {
		"prefix": "*put_table",
		"body": [
			"yield put({",
			"  type: 'updateState',",
			"  payload: {",
			"    $1: {",
			"      list: result,",
			"      pagination: {",
			"        total: count,",
			"        current: payload.page,",
			"        pageSize: payload.limit",
			"      }",
			"    }",
			"  }",
			"})"
		]
	}
}